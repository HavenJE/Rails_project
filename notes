Models are: 

1. Exercises = Posts    join table = categories & users 
    belongs_to :user
    belongs_to :category 
    has_many :users, through: :categories
    # has_many :comments 
    
    attribues:
    title : text 
    description = content : text 

    rails g resource exercise title:text description:text user:belongs_to category:belongs_to 

2. Users                
    has_many :exercises 
    has_many :categories, through: :exercises 
    #has_many :comments 
    #has_many :commented_exercises, through: :comments

    attribues: 
    username :string 
    email :string
    password_digest :string

    rails g resource user username email password_digest

3. Categories  
     
    has_many :exercises 
    has_many :users, through: :exercises 

    attribues:
    name

    rails g resource category name:text 

# 4. Comments  join table = posts & users 
#     belongs_to :user
#     belongs_to :post 

#     attribues:
#     content 

The signifying piece of a joined table that it has two belongs_to relationships - Exercises in my project caste! 

# if you have webpacker missing error: do: 
    rails webpacker:install

# webpacker requires yarn install: 
    npm install --global yarn 

# To remove a git from directory 
    rm -rf .git

# This command allows you to create data in the terminal environment only - s = standbox 
in terminal; rails c -s # This did not work! 

# if you have a ROLLBACK TO SAVEPOINT error in the terminal 
    variable.errors or 
    variable.save! 
    
# when you work on the terminal, a model like Exercises has two belongs_to relations so when you create a variable for Exercise, make sure to add these two relations e.g. 
    e = Exercise.create(title: "New Exercise", user: u, category: c)
To test the above combinations further, you can do: 
    u.exercises

# To drop the database 
    rake db:reset 

# Under models > user.rb 
has_secure_password # This give us access to authentication, validate password and its comformation if we decide to use it 

# under new.html.erb, the required:true for f.email is a Front-end protection, user-friendly and replacable, but they don't take care of Back-end protections 

# To set permitted and unpermitted thtings, we set a private method in our user_controller.rb 

# @line 17, we are setting that our first required params is the user and then we use .permit() to put your choice of attributes e.g. :username, :email, :password

# line 9, .save is a Rails method defined within the ActiveRecord::Persistence module. It saves the model. If the model is new, a record gets created in the database, otherwise the existing record gets updated. By default, save always run validations. 

# part 2 
# https://www.youtube.com/watch?v=rK_PV3_tuhA&list=PLI_-ZfHw8Y6Vw6WQb9KRUsgBAqkkXKOPH&index=2&ab_channel=JenniferHansen


# we made a home page by creating a root route - then linked that home page to the '/signup' page

# To create a login, you need to make sure that you are able to log out 
    # create a login route 
    # create a log out route 

# Under users_controller - show method, we could use find_by_id() or find()
# def show 
#     @user = User.find_by_id(params[:id]) => if it does not find anything, it returns nil 
#     @user = User.find(params[:id])
# end 

# @user = User.find_by_id(params[:id]) => if it does not find anything, it returns nil, and then you probably need to add a logic that says e.g. redirect_to '/home' if !@user 
# (redirect to home page if you don't find a user)


# @user = User.find(params[:id]) => if it does not find anything, it returns an error, and then you probably need to do a rescue statement where you rescue the error with an error page or sending them to home page. 

# we tend to use helper methods in the application controller. 

# I copied all controllers, models, views to the new rails_project with postgres db - got error with http://127.0.0.1:3000 port - so I used the code below to switch to http://127.0.0.1:3001 instead: 
#    bundle exec puma -C config/puma.rb -b tcp://127.0.0.1:3001 

# part 4 - authentication 
# https://www.youtube.com/watch?v=n8ZIzH5Ol-Q&list=PLI_-ZfHw8Y6Vw6WQb9KRUsgBAqkkXKOPH&index=5&ab_channel=JenniferHansen

# medium blog useful link: https://medium.com/swlh/google-authentication-strategy-for-rails-5-application-cd37947d2b1b

# we add google authentication gems 
# gem 'omniauth'
# gem 'dotenv-rails'
# gem 'omniauth-google-oauth2'

# follow the steps for creating OAuth 2.0 Client IDs 
# add your GOOGLE_CLIENT_KEY and GOOGLE_CLIENT_SECRET 
# MAKE SURE YOU ADD the codes below under config/initializers/omniauth.rb as omni now defaults to only POST as allowed request_phase methods. https://stackoverflow.com/questions/65783394/no-route-matches-get-auth-google-oauth2-error-keeps-coming-up

# OmniAuth.config.allowed_request_methods = [:post, :get]
# OmniAuth.config.silence_get_warning = true

# added google link for sign in in views/sessions/home.html.erb 
# <%= link_to "Log In With Google", '/auth/google_oauth2' %>  
# The /auth/google_oauth2 works with omniauth and it gets processed by omniauth initializer to figure out where it need to send it and to what outside resource. Its important to be written that way! But we don't need to add a route in the routes.rb file, however we need to add a callback route over there. 

# After finishing all steps that Jennifer did, make sure you restart your server rails s 

# Scope - from 40:00 
# scope method is a class level method that limit your return to be like a scoped return => returns some of the instances e.g. some of the exercises - it can very useful to sort or organise by a category. 
# on working on scope method, take a look at your schema because we need to work on the attribues 
# we scope method perferably called in the controller 

# part 5 - validtion 
# https://www.youtube.com/watch?v=2jlQ3YiCmIY&list=PLI_-ZfHw8Y6Vw6WQb9KRUsgBAqkkXKOPH&index=5&ab_channel=JenniferHansen

# before doing your validtion, you want your error messages to be displayed on the views 

# If you rendering the form again and you want to assign error messages, the easiest code that will show your errors for you is in that rails link below:
# https://guides.rubyonrails.org/active_record_validations.html#displaying-validation-errors-in-views

# if you add an exericse while its empty and you inspect the page, it will show you <div class="field_with_errors"> </div> - this has been created when using form_for as it accepts an object that has an error and automatically add the error div without us doing any logic for that. However, the page must be rendered, because if you redirect that back, we will lose the info that has been filled on the page. 

# how can you tell if the form is rendered/re-rendered or redircted? => The hint is: its rendered if we inspect the page and we see it has; class="field_with_errors"> </div> and the info is displayed in the page, not lost. 

# Where would you put codes that you need in multiple files aka repetitve codes? 
# => something that we need in every page - goes to layout 
# => if its a view-related info => you could make that code a partial (Jennifer recons), and her reason that she has a lot of html code (div, h1/2/3, ul, li, etc) - some suggests using helpers - but Jennifer says helpers use Ruby codes not html code. 

# @13:04, we created _errors.html.erb under layouts to have the error message rendered whenever a resource is missing e.g. forgot to add category, exercise, user etc - we using rails guide link; https://guides.rubyonrails.org/layouts_and_rendering.html#using-partials - and the code is:    <%= render partial: "errors", locals: {object: @exercise} %>
# object is what we named in the errors message;  object.errors 

# @18:11, to custom your validation, you write it as: 
# validate :too_many_exercise
# you need to define too_many_exercise as a method 

# when you are in a instance method => you have access to self 

# @41:22, Refactoring 
# We only use partials when we know that we have a repetitive code, if we don't have, then there is no need for it. 
# if we have a method that we need for only the controller within => we make it private method 
# if we have a method that we need to many controllers => we put it in the application_controller 

# If the exericse is not saved within the user's all exercises page, its probably because one of the belongs_to relations is not fulfilled 

# the advantage of using find_by is that it does not raise an error 

# queries like; where, order, grouping, or any of those SQL words => that's probably a hint that it should be moved to your model 

# how to make a decision about using helper only or a combo of helpers and partials? 
# 1. we use a helper method in a spot where you need to render/change a code btw two html tags 
# 2. if it changing the complete code that is being rendered => use a combo of helpers and partials 

# the helper folder is only for => views 
# if you going to move a code from erb file (emboded Ruby) into a .rb file (Ruby) => remove all <% %>, and use Ruby intropolation #{ }

# https://www.youtube.com/watch?v=HCpO4RIr8-c&ab_channel=JenniferHansen 
# Nested Form link-Jennifer 

# @9:28, form_for can accept an object e.g. @exercise or a symbol 

# under views folder > exercises folder > new.html.erb nested forms -> in line 20, when setting the fields_for :category => we are setting it for the model - whereas, when you setting it for :category_id => then the value you passing through will be a number. 
# @33:20, for the above point to work, you need to go to exercise_controller, on def exercise_params, add category_attributes:[:name] with other attributes if there are any. Also, make sure you have no changes to your create method. 